import { IClock } from './clock/clock';
import { CortexM0Core } from './cortex-m0-core';
import { GPIOPin } from './gpio-pin';
import { RPADC } from './peripherals/adc';
import { RPDMA } from './peripherals/dma';
import { RPI2C } from './peripherals/i2c';
import { Peripheral } from './peripherals/peripheral';
import { RPPIO } from './peripherals/pio';
import { RPPPB } from './peripherals/ppb';
import { RPPWM } from './peripherals/pwm';
import { RPSPI } from './peripherals/spi';
import { RPUART } from './peripherals/uart';
import { RPUSBController } from './peripherals/usb';
import { RPSIO } from './sio';
import { Logger } from './utils/logging';
export declare const FLASH_START_ADDRESS = 268435456;
export declare const RAM_START_ADDRESS = 536870912;
export declare const APB_START_ADDRESS = 1073741824;
export declare const DPRAM_START_ADDRESS = 1343225856;
export declare const SIO_START_ADDRESS = 3489660928;
export declare class RP2040 {
    readonly clock: IClock;
    readonly bootrom: Uint32Array;
    readonly sram: Uint8Array;
    readonly sramView: DataView;
    readonly flash: Uint8Array;
    readonly flash16: Uint16Array;
    readonly flashView: DataView;
    readonly usbDPRAM: Uint8Array;
    readonly usbDPRAMView: DataView;
    readonly core: CortexM0Core;
    clkSys: number;
    clkPeri: number;
    readonly ppb: RPPPB;
    readonly sio: RPSIO;
    readonly uart: RPUART[];
    readonly i2c: RPI2C[];
    readonly spi: RPSPI[];
    readonly pwm: RPPWM;
    readonly adc: RPADC;
    readonly gpio: GPIOPin[];
    readonly qspi: GPIOPin[];
    readonly dma: RPDMA;
    readonly pio: RPPIO[];
    readonly usbCtrl: RPUSBController;
    private stopped;
    logger: Logger;
    private executeTimer;
    readonly peripherals: {
        [index: number]: Peripheral;
    };
    onBreak: (code: number) => void;
    constructor(clock?: IClock);
    loadBootrom(bootromData: Uint32Array): void;
    reset(): void;
    readUint32(address: number): number;
    findPeripheral(address: number): Peripheral;
    /** We assume the address is 16-bit aligned */
    readUint16(address: number): number;
    readUint8(address: number): number;
    writeUint32(address: number, value: number): void;
    writeUint8(address: number, value: number): void;
    writeUint16(address: number, value: number): void;
    get gpioValues(): number;
    setInterrupt(irq: number, value: boolean): void;
    updateIOInterrupt(): void;
    step(): void;
    execute(): void;
    stop(): void;
    get executing(): boolean;
}
